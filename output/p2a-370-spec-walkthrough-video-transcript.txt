 Hey, how's it going everyone? Max here, gonna go over P2A real quick. I should have done this a couple days ago, but my group office hours are canceled for that. So I wanted to go ahead and make it up to you guys and just go ahead and record this quick 15 minute video or so just going over P2A some common issue students have and also just like the process you go through resolving this. So we're doing here. We're taking our existing assembler from projects 1a. So basically you can literally copy and paste your code from P1a. That's a really good starting spot for this project and recreating this new assembler. The big difference here is we're introducing these things called global labels. So a global label is going to be defined by any label that starts with the capital letter. So in this example right here, we can see that sub adder is indeed a global label. Or as these other labels are still local because they're in lowercase. So a couple of things about global labels. They don't have to be defined in a given file. So let's go ahead and just look at example one real quick. We can see that sub adder is referenced by this load word instruction on this line. But the thing is that sub adders actually not defined in this file. That's completely fine. Well, you should be looking for is essentially if a global labels referenced by a load word or a store word instruction. But it isn't defined. That's not going to be an error in this case. What is going to be an error is if we have a local label like five for example that isn't defined within this file. So just like projects one a we still need to air check for that. What we want to do though is make sure to keep track of all of our global labels. So again, for example, we have sub adder right here. This is going to be a global label. We want to keep track of that. The objective of the project is to basically whenever you assemble a file, the outputs can be a bit different. That's because we want to go ahead and make sure that we can use it with our linker for project to L. So what is our actual assembly file outlook like? Well, we first have this header right here. The header is basically going to be composed of four things. It's going to be the size of text, the size of data, size of our relocation table. And the size of our sorry, this should be symbol table. And the size of our location table. I say size is basically how many entries do we have in here. So what I recommend doing is having just four variables dedicated to keeping track of how large these sections are. So if you do your first pass, you can go ahead and just determine cool. This is an op code that isn't fill. That means it's going to be an instruction. And I see it talks about discussion instructions are all located inside text. If it's a dot fill statement, then it's going to be data. And then simple tables and location tables. We have to go ahead and construct those. So right here we can see is that we have one, two, three, four, five, six items in text. We'll go ahead and play six here. Our data is going to be just size one. So put a one here. And then we'll go into seeing what are simple tables and relocation table should be a couple notes, though, on what global address is actually mean. So again, a global label is just a label that is an uppercase for its first character. And what that allows us to do is in our link up files. This sub adder might be defined as other file, which it is right here. So essentially load word to go ahead and it would pull the value of sub one right here and put it inside register for that happens in the linker for P1A, sorry P2A, we're actually not concerned with that. So what we're concerned about is resolving this address. So if you ever see a global label that isn't defined within your file, check for two things. First of all, but isn't defined. Make sure you're not working on a BQ statement. If a BQ statement references a global label like this that isn't defined within its file, then that's going to be an error. The reason being is that BQ uses a PC relative for its offset. And if we do have a global label that could cause an issues. However, if the global labels defined within the assembly file. So let's say, for example, this is a global label right here. This is fine. As long as the global labels defined within this file right here, we can have that as input. We can't have, though, is let's go ahead, change this back. Let's go ahead and add this label right here. We'll call it global. And let's say that BQ is going to global. Since global is not defined within this file, we would have to go ahead and exit one on that. So the first thing we'll do here is go ahead and translate our text sectional quick. So what we're going to do next is go ahead and translate our text into machine code. So for this instruction right here, this is the exact same as you do for project 1a. So go ahead and copy this in real quick. So we have this right here. Next thing we have is this load word instruction with 0 4 right here, we have a global address. So what we do is we actually resolve this at the value of 0 because it isn't defined within this file. So if you go ahead and translate that over, it's just going to be the op code load word, red J is going to be 0, red B is going to be 4. And then sub adder the address is going to be 0. So we have this next thing we have is a gel. So these three statements right here won't change at all. They're going to be the exact same as they would be in project 1a. So as halt, I'll go ahead and put that in real quick. Alright, next thing we have is our simple table. So a simple table essentially references symbols that are used within this file. You only need to include one symbol once. So our first going to do is find any defined symbols within this file. So it defines symbol again is just going to be a global label that's defined. And again, a definition, a label being defined is if it's referenced on the left hand side of an op code like this. So for example, an example to you right here, we can see sub adders defined on this line right here. If it isn't defined, we'll go ahead and include in its reference. We'll go ahead and include that as well in our simple table. So we do this is we'll go ahead and first put the label name. So sub adder because that's going to be a global label. So we'll say sub adder. And then we'll say, is it defined in our data section or text section or is it undefined. So since this isn't defined anywhere, we're going to go ahead and say it's undefined. And then the line number is at if it is defined if it's undefined, we're going to go ahead and place zero right here. So what happens if it is defined on this case, we'll do is we'll go ahead and say for sub adder, where is this defined. And this example sub adder is going to be defined. We'll go ahead and say sub adder. It's defined in the data section because there's a fill statement associated with it. So say data. And then what line of the data section is it defined in. So if we say this is line zero, then sub adder is going to be defined online one just like this. So going back to this since this is the only global label we have. We're done with the simple table. So we'll go ahead and put a size of one right here. After that, we have a relocation table. This is essentially dedicated for load word and store word instructions that reference labels. Because once we're done linking once you start doing linking project, you're going to begin to realize that if we reference, let's say for example, five and sub adder. Those are going to shift around with what wine they are in our file, because once we link our text sections and data sections are going to be stacked and pop each other. So the line number in which these labels are defined is actually going to change. So it's a keep track of that. So in that case, we can see that load word references five. So far relocation table, the way we record entries is if we go ahead and specify what line is the correct. So this occurs at line zero. What instruction is associated with load word and what's the label five. So even though this is a local label, we still have to do this. And again, the reason why is because once we link we're going to have essentially the text of our first file right here, the text of our first file right here, the data for zero file and the data for first file. So as you can see, that's basically going to go ahead and change what line number they're to find that. And if we go ahead and just resolve load word five to basically be the offset of one, two, three, four, five, six, that's going to change. So by keeping track of this information, we can go ahead and just add some value onto the offset. And then it's going to be properly linked in the future. And again, we're doing this because where these labels are defined is going to change once we link up. So again, we to go ahead and do the exact same thing for this right here. So local labels and global labels for load word and store word. We do have to do this for. So go ahead and say line one load word and sub adder. Now you might be tempted to go ahead and do this for the BQ statements, but we actually don't have to do that. The reason why is because BQ statements are going to reference a label local to this file. And since BQ statements use PC relative addressing. If we go ahead and let's say this text section for this file right here and so game moved around, that's not going to be an issue. The reason being is that again, we use PC relative addressing. So this start right here, basically say go backwards to steps. That's not going to change if we go ahead and move this text around. It's going to be the exact same. So we don't have to go ahead and change that at all. And since this is it, we're going to go ahead and say this is a size two. And that's going to be the output for the first example. Second example is going to be a very similar process. So we have load word zero, neck one. We go ahead and just do that is the exact same as we did for project one a go ahead and put this in here like this. Next two lines are literally the exact same thing, which is pretty cool. Oh, I don't know the fill statements. Sorry about that. I just realized that. Okay, we also have our data section. We'll split a five right here. All good. Going back to this. We do have two of these values right here. So we do have a fill statement of negative one and sub one. We're then going to go ahead and say negative one for data. Negative one sub ones to find a line zero. We'll go ahead and put that. For a simple table. It's going to be a very similar process. So do we have any global labels that are defined here. We do we do have sub adder. It is defined. So we'll go ahead and say sub adder. We're going to find on. And data right because this is associated with that fill statement. So this is our data section and it's defined online zero one of our data sections to go ahead and put one right there. And that's it for global labels. Last thing we have to do is a relocation table. So a relocation table again. We're going to go ahead and look at our load word operators, store word, etc. So we have any fill statements that are dependent upon op codes that are dependent upon a label value because again, notice here, we're filling it with whatever line sub ones to find that. So in this case we said zero. But once we do end up doing the linking process again what's going to happen is we're going to have our text from file one up here and then right the low that's going to be the text from file two. That's going to change what line sub ones to find that. So once we do the linking process what this looks like is we have all these op codes right here. We're going to copy this put it down here. Whoops one second. All right, so when we link this up we actually have is we have this text section right here and then we have the text section of this next file right below here. So notice here that sub one it's address like the why is to find that is actually going to change is now going to be one two three four to be zero one two three four to be six now. So it's going to end up changing the value of the dot fill statement right here for dot fill sub one. So to go ahead and put that inside a relocation table and as always we have a load word right here which dependent upon this label which again is going to shift after linking. So I'll go ahead and put that in right here. I'll say online zero is where to find that again load word and then the label is dependent on negative one. We also to go ahead and do the exact same thing for the fill statement. So we go ahead and say one dot fill. Because this is defined in line one of the data section and we'll just go ahead and say sub one just like this. And the cool thing is we know that this is inside the data section because the fill statement if it's a load word store word then it's going to be dependent upon the text section. And after that we'll go ahead and say we have three entries for our text section to for our data one for relocation to or to one for our simple table and to for the relocation table. Couple of quick things to summarize here before I sign off real quick. The main thing being is recognize this be cute does not be updated it's entries don't need to be added to the relocation table at all. Again that's because they're PC relative addresses so that means you know it's already resolved whenever we link up the files it actually won't change anything at all. And if you do you won't get it right unfortunately what else is there. Oh yeah the key to it's totally fine if it references a global label just make sure that it's the five file so right here by added then some line like the queue zero zero subatter that's totally fine because sub adders defined within this file. Notice here is a fine in the fill statement so that actually would break our program but by move this to say right here sub adder this then this out of here then that's fine right that makes sense. Besides that couple other issues of seeing students have is whatever you're creating a file just make sure that you aren't going over the label limit in terms of size I've seen people with labels that are size seven or larger in terms of character count just make sure not doing that also make sure that you are using registers are between zero and seven so just look at that for a minute. I'm going to think of some more issues and i'll just come back real quick. I'm going to think of any more issues people are having like any glaring issues but one thing I can say about the process is if you're going to go ahead and work on example one real quick. Just like as computer like how do we think about doing this you so want to do your first pass go ahead and create label map use in project one. Store these labels you so want to make sure that if the labels being referenced it exists if it's a local label if it's a global you can tell us global again because if it's first indexes of uppercase letter so you can go ahead and look at the ask you value or just say. Oh is a value between capital A and lower in uppercase C if it is then it's a global label so be sure check that. Once you do that I recommend just translating your text instructions again it should be literally the exact same thing you did in project one a the only difference being that load word and store word if it's a global label that's not defined then you just go ahead and put zero for the offset. After that go ahead and look at your symbol table then location table keep track of information and then at very end go ahead and print everything out that is because the first thing your printouts can be the header and you won't know the size of the information tell your done with the program so let's go ahead and have like four counts for those printed out then print out your text section then your data section location table and then your simple simple table then real location table otherwise the project shouldn't be that much extra work again use your code from p1a you should be chilling and come to office hours if any questions I know it's doing two days so you'll be kind of busy but hopefully we can try to get you in answering any questions. Piazza has a lot of good answers on right now a lot of good questions so be sure to search there as well she will define something pretty fun there and yeah besides that leave any comments any questions about what I talked about today hopefully that was useful to you guys yeah let me know if you have any more questions and yeah good luck.